Pandoc 文件转换器 - 使用和维护指南

1. 基本要求
------------
- Python 3.x
- Flask
- Pandoc（必须正确安装并添加到系统 PATH）

2. 环境检查
------------
1) 检查 Python 安装：
   python --version

2) 检查 Pandoc 安装：
   pandoc --version

3) 检查 Flask 安装：
   pip list | findstr Flask

3. 启动应用
------------
1) 进入项目目录：
   cd 项目目录路径

2) 启动服务器：
   python app.py

3) 访问应用：
   在浏览器中打开 http://127.0.0.1:5000

4. 日常维护
------------
1) 定期检查和清理：
   - uploads 文件夹（临时上传文件）
   - output 文件夹（转换后的文件）
   这些文件夹会在每次转换时自动清理，但如果程序异常退出可能需要手动清理。

2) 检查日志：
   - 查看控制台输出的错误信息
   - 如果部署在服务器上，确保设置了适当的日志记录

3) 定期测试：
   - 测试 Word 转换功能
   - 测试 HTML 转换功能
   - 确保下载功能正常工作

5. 常见问题解决
------------
1) 找不到 pandoc：
   - 确认 Pandoc 已正确安装
   - 检查系统 PATH 环境变量
   - 重启应用程序

2) 文件转换失败：
   - 检查源文件是否损坏
   - 确认文件格式是否支持
   - 查看控制台错误信息

3) 下载功能异常：
   - 检查 output 文件夹权限
   - 确认文件确实已经生成
   - 检查文件名是否包含特殊字符

6. 安全注意事项
------------
1) 文件安全：
   - 定期清理临时文件
   - 不要在 uploads 和 output 文件夹中存储敏感信息
   - 建议设置文件大小限制

2) 访问控制：
   - 如果部署在公网，考虑添加访问控制
   - 限制允许的文件类型
   - 监控异常的使用行为

7. 备份建议
------------
1) 定期备份：
   - 源代码
   - 配置文件
   - 自定义模板（如果有）

2) 记录修改：
   - 记录对代码的修改
   - 保存配置的变更历史

8. 升级维护
------------
1) 依赖更新：
   - 定期检查 Flask 更新
   - 关注 Pandoc 新版本
   - 测试新版本兼容性

2) 功能扩展：
   - 添加新的文件格式支持前先测试
   - 保持代码结构的清晰性
   - 记录新增功能的使用方法

9. 性能优化
------------
1) 监控指标：
   - 文件转换时间
   - 内存使用情况
   - 并发处理能力

2) 优化建议：
   - 限制同时处理的文件数量
   - 定期清理临时文件
   - 优化大文件处理逻辑

10. 联系支持
------------
如遇到问题，可以：
1) 查看 Pandoc 官方文档：https://pandoc.org/
2) 检查 Flask 文档：https://flask.palletsprojects.com/
3) 在 GitHub 上搜索相关问题
4) 咨询开发人员获取支持

注意：定期查看此文档并根据实际使用情况更新维护指南。